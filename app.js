// Generated by CoffeeScript 1.7.1
(function() {
  var async, colors, decorate, decorators, ejs, ejslocals, env, express, fs, helpers, http, init, initExpress, initLogger, initRoutes, initSocketIo, makeLogDecorator, settings, wraplog, _,
    __slice = [].slice;

  fs = require('fs');

  _ = require('underscore');

  async = require('async');

  colors = require('colors');

  decorators = require('decorators2');

  decorate = decorators.decorate;

  helpers = require('helpers');

  http = require('http');

  express = require('express');

  ejs = require('ejs');

  ejslocals = require('ejs-locals');

  settings = {
    httpport: 3000,
    cookiesecret: 'no secret',
    cookiedomain: 'test.com',
    viewsFolder: __dirname + '/views',
    staticFolder: __dirname + '/static'
  };

  settings = _.extend(settings, require('./settings').settings);

  env = {
    settings: settings
  };

  initLogger = function(env, callback) {
    env.log = function() {
      var data, json, taglist, tags, text;
      text = arguments[0], data = arguments[1], taglist = 3 <= arguments.length ? __slice.call(arguments, 2) : [];
      tags = {};
      _.map(taglist, function(tag) {
        return tags[tag] = true;
      });
      if (tags.error) {
        text = text.red;
      }
      if (tags.error && _.keys(data).length) {
        json = " " + JSON.stringify(tags.error);
      } else {
        json = "";
      }
      return console.log(String(new Date()).yellow + " " + _.keys(tags).join(', ').green + " " + text + json);
    };
    env.logres = function(name, callback) {
      return function(err, data) {
        if (err) {
          env.log(name + ': ' + err, {
            error: err
          }, 'init', 'fail');
        } else {
          env.log(name + "...", {}, 'init', 'ok');
        }
        return callback(err, data);
      };
    };
    env.log('logger initialized', {}, 'init', 'info');
    return callback();
  };

  initExpress = function(callback) {
    var app;
    env.app = app = express();
    return app.configure(function() {
      app.engine('ejs', ejslocals);
      app.set('view engine', 'ejs');
      app.set('views', settings.viewsFolder);
      app.use(express["static"](settings.staticFolder, {
        maxAge: 18000
      }));
      app.use(express.cookieParser());
      app.use(express.bodyParser());
      app.use(express.favicon(settings.staticFolder + "/favicon.ico"));
      app.use(express.logger('dev'));
      app.use(app.router);
      app.use(function(err, req, res, next) {
        console.log(err.stack);
        env.log('web request error', {
          stack: err.stack
        }, 'error', 'http');
        return res.end('error');
      });
      env.server = http.createServer(env.app);
      env.server.listen(settings.httpport);
      env.log('http server listening', {}, 'info', 'init', 'http');
      return callback(void 0, true);
    });
  };

  initRoutes = function(callback) {
    env.app.get('/', function(req, res) {
      return res.render('index', {});
    });
    return callback();
  };

  initSocketIo = function(callback) {
    var io;
    io = require('socket.io')(env.server);
    io.on('connection', function(socket) {
      console.log("user connected");
      socket.on('msg', function(msg) {
        return console.log("got message", msg);
      });
      return socket.on('disconnect', function() {
        return console.log("user disconnected");
      });
    });
    return callback();
  };

  makeLogDecorator = function(name) {
    return function(f, args) {
      var callback;
      callback = args.shift();
      return f(function(err, data) {
        if (!err) {
          env.log(name + ' ready', {}, 'info', 'init', 'done', name);
        } else {
          env.log(name + ' failed!', {}, 'info', 'init', 'error', name);
        }
        return callback(err, data);
      });
    };
  };

  wraplog = function(name, f) {
    return decorators.decorate(makeLogDecorator(name), f);
  };

  init = function(callback) {
    return async.auto({
      logger: function(callback) {
        return initLogger(env, callback);
      },
      express: ['logger', wraplog('express', initExpress)],
      routes: ['express', 'socketio', wraplog('routes', initRoutes)],
      socketio: ['express', wraplog('socketio', initSocketIo)]
    }, callback);
  };

  init(function(err, data) {
    if (!err) {
      return env.log('system initialized', {}, 'info', 'init', 'done');
    } else {
      return env.log('system init failed', {}, 'info', 'init', 'error');
    }
  });

}).call(this);
